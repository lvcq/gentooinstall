#!/usr/bin/env bash

NAME="Gentoo Install"
CODENAME="gentooinstall"
COPYRIGHT="Copyright (C) 2016 Nathan Shearer"
LICENSE="GNU General Public License 2.0"
VERSION="0.0.0.0"
MIRROR="http://mirrors.163.com/gentoo/"

function gentooinstall_architecture
{
	if uname -m | grep -qx "alpha"; then
		echo "alpha"
	elif uname -m | grep -q "armv4"; then
		echo "armv4"
	elif uname -m | grep -q "armv5"; then
		echo "armv5"
	elif uname -m | grep -q "armv6"; then
		if grep -q vfp /proc/cpuinfo; then
			echo "armv6hf"
		else
			echo "armv6"
		fi
	elif uname -m | grep -q "armv7"; then
		if grep -q vfp /proc/cpuinfo; then
			echo "armv7hf"
		else
			echo "armv7"
		fi
	elif uname -m | grep -q "armv8"; then
		if grep -q vfp /proc/cpuinfo; then
			echo "armv8hf"
		else
			echo "armv8"
		fi
	elif uname -m | grep -q "aarch64"; then
		if grep -q fp /proc/cpuinfo; then
			echo "armv8hf"
		else
			echo "armv8"
		fi
	elif uname -m | grep -qx "i386"; then
		echo "i386"
	elif uname -m | grep -qx "i686"; then
		echo "i686"
	elif uname -m | grep -qx "mips"; then
		echo "mips"
	elif uname -m | grep -qx "ppc"; then
		echo "ppc"
	elif uname -m | grep -qx "ppc64"; then
		echo "ppc64"
	elif uname -m | grep -qx "sparc64"; then
		echo "sparc64"
	elif uname -m | grep -qx "x86_64"; then
		echo "x86_64"
	elif uname -m | grep -qx "amd64"; then
		echo "x86_64"
	else
		echo "unknown"
	fi
}

# \brief Ensures dependencies are present
# \param $@ The dependencies to check for
function gentooinstall_check_dependencies
{
	for TOOL in "$@"; do
		if ! type "$TOOL" >/dev/null 2>/dev/null; then
			echo "$CODENAME: \"$TOOL\" is required for this application to work correctly." >&2
			exit
		fi
	done
}

# \brief Displays the help and exits the program
function gentooinstall_help
{
	#     01234567890123456789012345678901234567890123456789012345678901234567890123456789
	echo "Description:"
	echo "  Install Gentoo Linux by automating most of the steps in the Gentoo Handbook."
	echo
	echo "Usage:"
	echo "  $CODENAME [options]"
	echo
	echo "Options:"
	echo "  -a, --architecture x86_64"
	echo "    Which architecture to install. Default is the current architecture. Supported"
	echo "    architectures are: i486, i686, x86_64, armv4, armv5, armv6, armv6hf, armv7,"
	echo "    armv7hf, armv8, armv8hf."
	echo "  -b, --block-device /tmp/none"
	echo "    Which block device to partition."
	echo "  --block-device-block-size $((1024*1024))"
	echo "    What block size to align the partitions to."
	echo "  --block-device-partition-type gpt"
	echo "    What type of a partition table to create: gpt or msdos."
	echo "  --chroot false"
	echo "    Chroot into the destination directory for the current phase."
	echo "  -d, --destination /mnt/gentoo"
	echo "    Where to install."
	echo "  -h, --help"
	echo "    Display this help message and exit."
	echo "  -p, --phase phase1,phase2,..."
	echo "    A comma-separated list of which phases to run:"
	echo "      partition"
	echo "      mount"
	echo "      stage3download      default    Download the stage 3 tarball"
	echo "      stage3signature     default    Verify the cryptographic signature"
	echo "      stage3hash          default    Verify the hash"
	echo "      extract             default    Extract the stage 3 tarball"
	echo "      dynamictranslation  default    Enable dynamic translation if required"
	echo "      deletestage3        default    Delete the stage 3 tarball"
	echo "      resolvconf          default    Add default nameservers"
	echo "      mountchroot         default    Mount the chroot environment"
	echo "      portage             default    Install Portage"
	echo "      timezone            default    Set the timezone"
	echo "      locale              default    Set the locale"
	echo "      kernel                         Install and compile the kernel"
	echo "      bootloader                     Configure and install lilo"
	echo "      fstab                          Add boot, root, and swap entries"
	echo "      update              default    Update the world"
	echo "      password            default    Set the root password"
	echo "  --portage latest"
	echo "    Which portage snapshot to install, latest or a URL to a specific file to download."
	echo "  --stage3 latest"
	echo "    Which stage3 tarball to install, latest or a URL to a specific file to download."
	echo "  -t, --timezone \"UTC\""
	echo "    Which timezone to configure."
	echo
	echo "Examples:"
	echo "  $CODENAME -a x86_64 -d /mnt/gentoo -t \"Canada/Mountain\""
	echo "  $CODENAME -a x86_64 -d /mnt/gentoo --portage \"https://www.example.com/portage-20160320.tar.bz2\""
	echo
	echo "Version:"
	echo "  $NAME $VERSION"
	echo "  $COPYRIGHT"
	echo "  Licensed under $LICENSE"
	exit
}

# \brief The main function of this script
function gentooinstall_main
{
	#give the user a chance to cancel the install
	if ! $CHROOT; then
		echo "Installing Gentoo at \"$DESTINATION\"..."
		echo
		echo "We are the Gentoo Community."
		sleep 2
		echo "Power your systems and surrender your chips."
		sleep 2
		echo "Your ideological and technological distinctiveness will be added to our own."
		sleep 2
		echo "You will adapt to serve us."
		sleep 2
		echo "Resistance is futile."
		sleep 2
		echo
	fi

	#iterate through each phase
	local CURRENT_PHASE=$(echo -n "$PHASES" | sed -r -e 's/([^,]+),?.*?/\1/')
	local REMAINING_PHASES=$(echo -n "$PHASES" | sed -r -e 's/[^,]+,?(.*?)/\1/')
	while [ "$CURRENT_PHASE" != "" ]; do
		case "$CURRENT_PHASE" in
			"partition")          gentooinstall_phase_partition;;
			"mount")              gentooinstall_phase_mount;;
			"stage3download")     gentooinstall_phase_stage3download;;
			"stage3signature")    gentooinstall_phase_stage3signature;;
			"stage3hash")         gentooinstall_phase_stage3hash;;
			"extract")            gentooinstall_phase_extract;;
			"dynamictranslation") gentooinstall_phase_dynamictranslation;;
			"deletestage3")       gentooinstall_phase_deletestage3;;
			"resolvconf")         gentooinstall_phase_resolvconf;;
			"mountchroot")        gentooinstall_phase_mountchroot;;
			"portage")            gentooinstall_phase_portage;;
			"timezone")           gentooinstall_phase_timezone;;
			"locale")             gentooinstall_phase_locale;;
			"kernel")             gentooinstall_phase_kernel;;
			"bootloader")         gentooinstall_phase_bootloader;;
			"fstab")              gentooinstall_phase_fstab;;
			"update")             gentooinstall_phase_update;;
			"password")           gentooinstall_phase_password;;
			*)
				echo "error: unknown phase: \"$CURRENT_PHASE\""
				break
				;;
		esac
		if [ $? -eq 1 ]; then
			echo "error: the $CURRENT_PHASE phase encountered an error"
			exit 1
		fi
		CURRENT_PHASE=$(echo -n "$REMAINING_PHASES" | sed -r -e 's/([^,]+),?.*?/\1/')
		REMAINING_PHASES=$(echo -n "$REMAINING_PHASES" | sed -r -e 's/[^,]+,?(.*?)/\1/')
	done
}

function gentooinstall_phase_bootloader
{
	if $CHROOT; then
		env-update
		source /etc/profile
		
		echo "Starting the bootloader phase..."

		if [ ! -b "$DEVICE" ]; then
			echo "error: \"$DEVICE\" is not a block device"
			return 1
		fi
		
		emerge -uq sys-boot/lilo
		
		KERNEL=$(ls /boot/vmlinuz-*)
		if [ ! -f "$KERNEL" ]; then
			echo "error: A kernel was not found at \"$KERNEL\""
			return 1
		fi
		KERNEL_VERSION=$(echo "$KERNEL" | sed -r 's/^.*-//')
		ROOTPARTUUID=$(lsblk -f -n -o PARTUUID "$DEVICE"*2)
		
		# some hard drives use characters in their id that causes lilo to break when using boot=/dev/disk/by-id
		# this symlink is a workaround for that problem
		BOOTBYID=$(find -L /dev/disk/by-id -samefile "$DEVICE" | head -n 1)
		ln -s "$BOOTBYID" /etc/lilo.conf.boot
		
		echo "default=$KERNEL_VERSION" >/etc/lilo.conf
		echo "prompt" >>/etc/lilo.conf
		echo "timeout=50" >>/etc/lilo.conf
		echo "boot=/etc/lilo.conf.boot" >>/etc/lilo.conf
		echo "image=$KERNEL" >>/etc/lilo.conf
		echo "	label=$KERNEL_VERSION" >>/etc/lilo.conf
		echo "	append=\"root=PARTUUID=$ROOTPARTUUID rootwait\"" >>/etc/lilo.conf
		
		lilo
	else
		cp -f "$THIS" "$DESTINATION/tmp"
		$CHROOTARCH chroot "$DESTINATION" /tmp/gentooinstall --chroot --phase bootloader -b "$DEVICE"
	fi
}

function gentooinstall_phase_deletestage3
{
	rm "$DESTINATION"/stage3-*.tar.*
}

function gentooinstall_phase_dynamictranslation
{
	if [ $(gentooinstall_architecture) != "$ARCHITECTURE" ]; then
		case $(gentooinstall_architecture) in
			"armv6hf")
				case "$ARCHITECTURE" in
					"armv4" | "armv5" | "armv6")
						echo "Not installing qemu for dynamic binary translation because the guest architecture is nativly supported by the host."
						;;
				esac
				;;
			"armv7hf")
				case "$ARCHITECTURE" in
					"armv4" | "armv5" | "armv6" | "armv6hf" | "armv7")
						echo "Not installing qemu for dynamic binary translation because the guest architecture is nativly supported by the host."
						;;
				esac
				;;
			"armv8hf")
				case "$ARCHITECTURE" in
					"armv4" | "armv5" | "armv6" | "armv6hf" | "armv7" | "armv7hf" | "armv8")
						echo "Not installing qemu for dynamic binary translation because the guest architecture is nativly supported by the host."
						;;
				esac
				;;
			"x86_64")
				case "$ARCHITECTURE" in
					"i486" | "i686" | "x86_64")
						echo "Not installing qemu for dynamic binary translation because the guest architecture is nativly supported by the host."
						;;
					"armv4" | "armv5" | "armv6" | "armv6hf" | "armv7" | "armv7hf" | "armv8hf")
						echo -n "Verifying kernel support for 'misc binaries'..."
						if [ ! -d /proc/sys/fs/binfmt_misc ]; then
							echo " Failed."
							echo "error: kernel support for 'misc binaries' is required"
							echo "hint: on Gentoo this can be enabled by starting the qemu-binfmt service"
							return 2
						fi
						echo " Success."
						
						case "$ARCHITECTURE" in
							"armv4" | "armv5" | "armv6" | "armv6hf" | "armv7" | "armv7hf")
								echo -n "Verifying that \"/usr/bin/qemu-arm\" is a static binary..."
								if ! file /usr/bin/qemu-arm | grep 'statically linked' >/dev/null; then
									echo " Failed."
									echo "error: the file \"/usr/bin/qemu-arm\" is not a static binary"
									echo "hint: on Gentoo this can be fixed by enabling the static-user use flag for app-emulation/qemu"
									return 3
								fi
								echo " Success."
								;;
							"armv8hf")
								echo -n "Verifying that \"/usr/bin/qemu-aarch64\" is a static binary..."
								if ! file /usr/bin/qemu-aarch64 | grep 'statically linked' >/dev/null; then
									echo " Failed."
									echo "error: the file \"/usr/bin/qemu-aarch64\" is not a static binary"
									echo "hint: on Gentoo this can be fixed by enabling the static-user use flag for app-emulation/qemu"
									return 3
								fi
								echo " Success."
								;;
							*)
								echo "error: unsupported host/guest combination with host=$(gentooinstall_architecture) and guest=$ARCHITECTURE"
								return 1
								;;
						esac
						
						echo -n "Testing dynamic binary translation..."
						if ! "$DESTINATION"/bin/busybox true >/dev/null 2>/dev/null; then
							echo " Failed."
							echo "error: dynamic translation test failed for \"$DESTINATION//bin/busybox test\""
							echo "hint: try running the same test manually before continuing: \"$DESTINATION/bin/busybox true\""
							return 4
						fi
						echo " Success."
						
						case "$ARCHITECTURE" in
							"armv4" | "armv5" | "armv6" | "armv6hf" | "armv7" | "armv7hf")
								echo -n "Copying \"/usr/bin/qemu-arm\" into the installation to enable dynamic binary translation..."
								cp /usr/bin/qemu-arm "$DESTINATION"/usr/bin
								echo " Done."
								;;
							"armv8hf")
								echo -n "Copying \"/usr/bin/qemu-aarch64\" into the installation to enable dynamic binary translation..."
								cp /usr/bin/qemu-aarch64 "$DESTINATION"/usr/bin
								echo " Done."
								;;
							*)
								echo "error: unsupported host/guest combination with host=$(gentooinstall_architecture) and guest=$ARCHITECTURE"
								return 1
								;;
						esac
						;;
					*)
						echo "error: unsupported host/guest combination with host=$(gentooinstall_architecture) and guest=$ARCHITECTURE"
						return 1
						;;
				esac
				;;
			*)
				echo "error: unsupported host/guest combination with host=$(gentooinstall_architecture) and guest=$ARCHITECTURE"
				return 1
				;;
		esac
	else
		echo "Not installing qemu for dynamic binary translation because the host and guest architectures are the same."
	fi
}

function gentooinstall_phase_extract
{
	local STAGE3=$(ls "$DESTINATION"/stage3-*.tar.* | head -n 1)
	echo -n "Extracting \"$STAGE3\" to \"$DESTINATION\"... "
	tar xpf "$STAGE3" -C "$DESTINATION" --xattrs
	echo "Done."
}

function gentooinstall_phase_fstab
{
	if $CHROOT; then
		env-update
		source /etc/profile
		
		echo -n "Updating /etc/fstab... "
		
		if [ ! -b "$DEVICE" ]; then
			echo "error: \"$DEVICE\" is not a block device"
			return 1
		fi
		
		local BOOTUUID=$(lsblk -f -n -o UUID "$DEVICE"*1)
		local ROOTUUID=$(lsblk -f -n -o UUID "$DEVICE"*2)
		local SWAPUUID=$(lsblk -f -n -o UUID "$DEVICE"*3)
		
		mv /etc/fstab /etc/fstab.example
		echo "# <fs>  <mountpoint>  <type>  <opts>  <dump/pass>" >>/etc/fstab
		echo "UUID=$BOOTUUID  /boot  msdos  noauto,noatime  1 2" >>/etc/fstab
		echo "UUID=$ROOTUUID  /  ext4  noatime  0 1" >>/etc/fstab
		echo "UUID=$SWAPUUID  none  swap  sw  0 0" >>/etc/fstab
		
		echo "done."
		
	else
		cp -f "$THIS" "$DESTINATION/tmp"
		$CHROOTARCH chroot "$DESTINATION" /tmp/gentooinstall --chroot --phase fstab -b "$DEVICE"
	fi
}

function gentooinstall_phase_kernel
{
	if $CHROOT; then
		env-update
		source /etc/profile
		
		emerge -q sys-kernel/gentoo-sources
		cd /usr/src/linux
		local VERSION=$(grep '^VERSION' Makefile | sed -r 's/[^=]+ = //')
		local PATCHLEVEL=$(grep '^PATCHLEVEL' Makefile | sed -r 's/[^=]+ = //')
		local SUBLEVEL=$(grep '^SUBLEVEL' Makefile | sed -r 's/[^=]+ = //')
		local EXTRAVERSION=$(grep '^EXTRAVERSION' Makefile | sed -r 's/[^=]+ = //')
		local NAME=$(grep '^NAME' Makefile | sed -r 's/[^=]+ = //')
		make defconfig
		KERNEL=$(make -j$THREADS | tee /dev/tty | grep '^Kernel' | sed -r 's/^Kernel: (.*) is ready.*$/\1/')
		make modules_install
		cp "$KERNEL" /boot/$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION
	else
		cp -f "$THIS" "$DESTINATION/tmp"
		$CHROOTARCH chroot "$DESTINATION" /tmp/gentooinstall --chroot --phase kernel
	fi
}

function gentooinstall_phase_locale
{
	if $CHROOT; then
		env-update
		source /etc/profile
		echo "en_US ISO-8859-1" >>/etc/locale.gen
		echo "en_US.UTF-8 UTF-8" >>/etc/locale.gen
		locale-gen
		eselect locale set en_US.utf8
	else
		cp -f "$THIS" "$DESTINATION/tmp"
		$CHROOTARCH chroot "$DESTINATION" /tmp/gentooinstall --chroot --phase locale
	fi
}

function gentooinstall_phase_mount
{
	mkdir -p "$DESTINATION"
	mount "$DEVICE"*2 "$DESTINATION"
	mkdir -p "$DESTINATION"/boot
	mount "$DEVICE"*1 "$DESTINATION"/boot
}

function gentooinstall_phase_mountchroot
{
	mount -t proc none "$DESTINATION/proc"
	mount --rbind /sys "$DESTINATION/sys"
	mount --make-rslave "$DESTINATION/sys"
	mount --rbind /dev "$DESTINATION/dev"
	mount --make-rslave "$DESTINATION/dev"
}

function gentooinstall_phase_partition
{
	if [ ! -b "$DEVICE" ]; then
		echo "error: \"$DEVICE\" is not a block device"
		return 1
	fi
	if mount | grep "$DEVICE"; then
		echo "error: \"$DEVICE\" is currently mounted"
		return 2
	fi
	
	local DEVICE_MODEL=$(hdparm -I "$DEVICE" 2>/dev/null | grep --text 'Model Number' | cut -d ':' -f 2 | sed -r -e 's/ *(.*?) */\1/')
	local DEVICE_SERIAL=$(hdparm -I "$DEVICE" 2>/dev/null | grep --text 'Serial Number' | cut -d ':' -f 2 | sed -r -e 's/ *(.*?) */\1/')
	local DEVICE_SIZE=$(blockdev --getsize64 "$DEVICE")
	local DEVICE_SIZE_BLOCKS=$(($DEVICE_SIZE/$DEVICE_BLOCK_SIZE))
	
	local BOOT_SIZE_BLOCKS=$((128*1024*1024/$DEVICE_BLOCK_SIZE))
	if [ $(($BOOT_SIZE_BLOCKS*$DEVICE_BLOCK_SIZE)) -lt $((128*1024*1024)) ]; then
		BOOT_SIZE_BLOCKS=$((128*1024*1024/$DEVICE_BLOCK_SIZE + 1))
	fi
	local SWAP_SIZE_BLOCKS=$((4096*1024*1024/$DEVICE_BLOCK_SIZE))
	if [ $(($SWAP_SIZE_BLOCKS*$DEVICE_BLOCK_SIZE)) -lt $((4096*1024*1024)) ]; then
		SWAP_SIZE_BLOCKS=$((4096*1024*1024/$DEVICE_BLOCK_SIZE + 1))
	fi
	# leave one block a the beginning for the partition table, and one block at the end for rounding errors
	local ROOT_SIZE_BLOCKS=$(($DEVICE_SIZE_BLOCKS - 1 - $BOOT_SIZE_BLOCKS - $SWAP_SIZE_BLOCKS - 1 ))
	
	echo "Formatting with a $DEVICE_PARTITION_TYPE partition table and filesystems:"
	echo "  Device: $DEVICE"
	if [ "$DEVICE_MODEL" != "" ]; then
		echo "  Model Number: $DEVICE_MODEL"
	fi
	if [ "$DEVICE_SERIAL" != "" ]; then
		echo "  Serial Number: $DEVICE_SERIAL"
	fi
	echo "  Size: $DEVICE_SIZE Bytes"
	echo "  Block Size: $DEVICE_BLOCK_SIZE Bytes"
	echo "  Boot Partition Size: $(($BOOT_SIZE_BLOCKS*$DEVICE_BLOCK_SIZE)) Bytes"
	echo "  Root Partition Size: $(($ROOT_SIZE_BLOCKS*$DEVICE_BLOCK_SIZE)) Bytes"
	echo "  Swap Partition Size: $(($SWAP_SIZE_BLOCKS*$DEVICE_BLOCK_SIZE)) Bytes"
	echo "Press CTRL+C to cancel"
	for SECONDS in `seq 10 -1 1`; do
		printf "\r${SECONDS} ... "
		sleep 1
	done
	printf "\r0 ... \n"
	
	echo -n "Creating the partition table..."
	parted --script "$DEVICE" mklabel $DEVICE_PARTITION_TYPE
	echo " done."
	echo -n "Creating the boot partition..."
	parted --script "$DEVICE" mkpart primary fat32 "$DEVICE_BLOCK_SIZE"b $(($DEVICE_BLOCK_SIZE + $DEVICE_BLOCK_SIZE*$BOOT_SIZE_BLOCKS - 1))b
	parted --script "$DEVICE" set 1 boot on
	mkfs.vfat -F 32 "$DEVICE"*1 >/dev/null 2>/dev/null
	echo " done."
	echo -n "Creating the root partition..."
	parted --script "$DEVICE" mkpart primary ext4 $(($DEVICE_BLOCK_SIZE + $DEVICE_BLOCK_SIZE*$BOOT_SIZE_BLOCKS))b $(($DEVICE_BLOCK_SIZE + $DEVICE_BLOCK_SIZE*$BOOT_SIZE_BLOCKS + $DEVICE_BLOCK_SIZE*$ROOT_SIZE_BLOCKS - 1))b
	mkfs.ext4 -b 4096 -F "$DEVICE"*2 >/dev/null 2>/dev/null
	echo " done."
	echo -n "Creating the swap partition..."
	parted --script "$DEVICE" mkpart primary ext4 $(($DEVICE_BLOCK_SIZE + $DEVICE_BLOCK_SIZE*$BOOT_SIZE_BLOCKS + $DEVICE_BLOCK_SIZE*$ROOT_SIZE_BLOCKS))b $(($DEVICE_BLOCK_SIZE + $DEVICE_BLOCK_SIZE*$BOOT_SIZE_BLOCKS + $DEVICE_BLOCK_SIZE*$ROOT_SIZE_BLOCKS + $DEVICE_BLOCK_SIZE*$SWAP_SIZE_BLOCKS - 1))b
	mkswap "$DEVICE"*3 >/dev/null 2>/dev/null
	echo " done."
	local MEMORY_PHYSICAL=$(free -b | grep Mem | sed -r 's/[^0-9]+([0-9]+) .*/\1/')
	local MEMORY_SWAP=$(free -b | grep Swap | sed -r 's/[^0-9]+([0-9]+) .*/\1/')
	local MEMORY_TOTAL=$(($MEMORY_PHYSICAL+$MEMORY_SWAP))
	echo "Total physical and swap memory available: $MEMORY_TOTAL Bytes"
	if [ $MEMORY_TOTAL -lt $((1024*1024*1024*4)) ]; then
		echo "Less than 4GiB of physical and swap memory detected"
		echo -n "Activating the swap partition..."
		swapon "$DEVICE"*3
		echo " done."
	fi
}

function gentooinstall_phase_portage
{
	if $CHROOT; then
		env-update
		source /etc/profile
		if [ "$PORTAGE" = "latest" ]; then
			emerge-webrsync --quiet >/dev/null 2>/dev/null
			emerge --sync --quiet
		else
			wget "$PORTAGE" -O /tmp/portage.tar.bz2
			tar xjpf /tmp/portage.tar.bz2 -C /usr
		fi
		mkdir /etc/portage/package.use
		touch /etc/portage/package.use/zzzz-autounmask-write
	else
		cp -f "$THIS" "$DESTINATION/tmp"
		$CHROOTARCH chroot "$DESTINATION" /tmp/gentooinstall --chroot --phase portage --portage "$PORTAGE"
	fi
}

function gentooinstall_phase_resolvconf
{
	if [ ! -f "$DESTINATION/etc/resolv.conf" ]; then
		echo "Patching /etc/resolv.conf"
		echo "nameserver 8.8.8.8" >>"$DESTINATION/etc/resolv.conf"
		echo "nameserver 8.8.4.4" >>"$DESTINATION/etc/resolv.conf"
	fi
}

# \brief Download the latest stage3 tarball
function gentooinstall_phase_stage3download
{
	echo "Downloading the stage 3 tarball..."
	mkdir -p "$DESTINATION"
	if [ "$STAGE3" = "latest" ]; then
		case "$ARCHITECTURE" in
			'i486'|'i686'|'x86_64'|'armv4'|'armv5'|'armv6'|'armv6hf'|'armv7'|'armv7hf')
				case "$ARCHITECTURE" in
					'i486') LATEST=$(wget --quiet $MIRROR/releases/x86/autobuilds/latest-stage3-i486.txt -O-| tail -n 1 | cut -d " " -f 1);;
					'i686') LATEST=$(wget --quiet $MIRROR/releases/x86/autobuilds/latest-stage3-i686.txt -O-| tail -n 1 | cut -d " " -f 1);;
					'x86_64') LATEST=$(wget --quiet $MIRROR/releases/amd64/autobuilds/latest-stage3-amd64.txt -O-| tail -n 1 | cut -d " " -f 1);;
					'armv4') LATEST=$(wget --quiet $MIRROR/releases/arm/autobuilds/latest-stage3-armv4tl.txt -O-| tail -n 1 | cut -d " " -f 1);;
					'armv5') LATEST=$(wget --quiet $MIRROR/releases/arm/autobuilds/latest-stage3-armv5tel.txt -O-| tail -n 1 | cut -d " " -f 1);;
					'armv6') LATEST=$(wget --quiet $MIRROR/releases/arm/autobuilds/latest-stage3-armv6j.txt -O-| tail -n 1 | cut -d " " -f 1);;
					'armv6hf') LATEST=$(wget --quiet $MIRROR/releases/arm/autobuilds/latest-stage3-armv6j_hardfp.txt -O-| tail -n 1 | cut -d " " -f 1);;
					'armv7') LATEST=$(wget --quiet $MIRROR/releases/arm/autobuilds/latest-stage3-armv7a.txt -O-| tail -n 1 | cut -d " " -f 1);;
					'armv7hf') LATEST=$(wget --quiet $MIRROR/releases/arm/autobuilds/latest-stage3-armv7a_hardfp.txt -O-| tail -n 1 | cut -d " " -f 1);;
				esac
				BASENAME=$(basename "$LATEST")
				STAGE3_FILE="$DESTINATION/$BASENAME"
				case "$ARCHITECTURE" in
					'i486') wget -q --show-progress "$MIRROR/releases/x86/autobuilds/$LATEST" -O "$STAGE3_FILE";;
					'i686') wget -q --show-progress "$MIRROR/releases/x86/autobuilds/$LATEST" -O "$STAGE3_FILE";;
					'x86_64') wget -q --show-progress "$MIRROR/releases/amd64/autobuilds/$LATEST" -O "$STAGE3_FILE";;
					'armv4') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST" -O "$STAGE3_FILE";;
					'armv5') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST" -O "$STAGE3_FILE";;
					'armv6') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST" -O "$STAGE3_FILE";;
					'armv6hf') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST" -O "$STAGE3_FILE";;
					'armv7') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST" -O "$STAGE3_FILE";;
					'armv7hf') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST" -O "$STAGE3_FILE";;
				esac
				STAGE3_HASHES="$DESTINATION/$BASENAME.DIGESTS.asc"
				case "$ARCHITECTURE" in
					'i486') wget -q --show-progress "$MIRROR/releases/x86/autobuilds/$LATEST.DIGESTS.asc" -O "$STAGE3_HASHES";;
					'i686') wget -q --show-progress "$MIRROR/releases/x86/autobuilds/$LATEST.DIGESTS.asc" -O "$STAGE3_HASHES";;
					'x86_64') wget -q --show-progress "$MIRROR/releases/amd64/autobuilds/$LATEST.DIGESTS.asc" -O "$STAGE3_HASHES";;
					'armv4') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST.DIGESTS.asc" -O "$STAGE3_HASHES";;
					'armv5') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST.DIGESTS.asc" -O "$STAGE3_HASHES";;
					'armv6') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST.DIGESTS.asc" -O "$STAGE3_HASHES";;
					'armv6hf') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST.DIGESTS.asc" -O "$STAGE3_HASHES";;
					'armv7') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST.DIGESTS.asc" -O "$STAGE3_HASHES";;
					'armv7hf') wget -q --show-progress "$MIRROR/releases/arm/autobuilds/$LATEST.DIGESTS.asc" -O "$STAGE3_HASHES";;
				esac
				;;
			"armv8"|"armv8hf")
				BASENAME=$(wget $MIRROR/experimental/arm64/ -O - 2>/dev/null | grep -E -o "\"stage3-arm64-[0-9]+.tar.bz2\"" | sed -r -e "s/\"(.*)\"/\1/")
				STAGE3_FILE="$DESTINATION/$BASENAME"
				wget -q --show-progress "$MIRROR/experimental/arm64/$BASENAME" -O "$STAGE3_FILE"
				STAGE3_HASHES="$DESTINATION/$BASENAME.DIGESTS"
				wget -q --show-progress "$MIRROR/experimental/arm64/$BASENAME.DIGESTS" -O "$STAGE3_HASHES"
				;;
			*)
				echo "error: unsupported architecture: $ARCHITECTURE"
				exit 1;;
		esac
	else
		BASENAME=$(basename "$STAGE3")
		wget -q --show-progress "$STAGE3" -O "$DESTINATION/$BASENAME.tar.gz"
		wget -q --show-progress "$STAGE3.DIGESTS.asc" -O "$DESTINATION/$BASENAME.DIGESTS.asc"
	fi
}

function gentooinstall_phase_stage3signature
{
	# gentooinstall_check_dependencies gpg
	# echo "Verifying the cryptographic signature of the stage3 hashes..."
	# # verify the gentoo public key is installed
	# gpg --fingerprint 0xBB572E0E2D182910 >/dev/null 2>/dev/null
	# if [ $? -ne 0 ]; then
	# 	echo "The Gentoo Linux Release Engineering public key is not installed"
	# 	echo "Installing the Gentoo Linux Release Engineering public key..."
	# 	gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys 0xBB572E0E2D182910
	# fi
	# # check the signature
	# local STAGE3_SIGNATURE=$(ls "$DESTINATION/stage3-"*".tar."*".DIGESTS.asc" | head -n 1)
	# gpg --verify "$STAGE3_SIGNATURE" >/dev/null 2>/dev/null
	# if [ $? -ne 0 ]; then
	# 	echo "error: the cryptographic signature of \"$STAGE3_SIGNATURE\" could not be verified!"
	# 	exit 1
	# fi
}

function gentooinstall_phase_stage3hash
{
	echo -n "Verifying the hash of the stage3 tarball... "
	local STAGE3_FILE=$(ls "$DESTINATION/stage3-"*".tar."* | head -n 1)
	local STAGE3_HASHES=$(ls "$DESTINATION/stage3-"*".tar."*".DIGESTS"* | head -n 1)
	grep $(sha512sum "$STAGE3_FILE") "$STAGE3_HASHES" >/dev/null
	if [ $? -ne 0 ]; then
		echo "Failed."
		echo "error: the downloaded file \"$STAGE3_FILE\" does not match the sha512sum hash in \"$STAGE3_HASHES\""
		exit 1
	fi
	echo "Success."
}

function gentooinstall_phase_timezone
{
	if $CHROOT; then
		env-update
		source /etc/profile
		echo "$TIMEZONE" >/etc/timezone
		emerge --config sys-libs/timezone-data
	else
		cp -f "$THIS" "$DESTINATION/tmp"
		$CHROOTARCH chroot "$DESTINATION" /tmp/gentooinstall --chroot --phase timezone -t "$TIMEZONE"
	fi
}

function gentooinstall_phase_update
{
	if $CHROOT; then
		env-update
		source /etc/profile
		
		emerge -1u --backtrack=65536 --quiet sys-apps/portage
		emerge -uDN --with-bdeps=y --backtrack=65536 --quiet world
	else
		cp -f "$THIS" "$DESTINATION/tmp"
		$CHROOTARCH chroot "$DESTINATION" /tmp/gentooinstall --chroot --phase update
	fi
}

function gentooinstall_phase_password
{
	if $CHROOT; then
		env-update
		source /etc/profile
		
		echo "root:$PASSWORD" | chpasswd
	else
		cp -f "$THIS" "$DESTINATION/tmp"
		$CHROOTARCH chroot "$DESTINATION" /tmp/gentooinstall --chroot --phase password --password "$PASSWORD"
	fi
}

#------------------------------------------------------------------------------
# default configuration

ARCHITECTURE=$(gentooinstall_architecture)
CHROOT=false
CHROOTARCH=""
DEBUG=false
DESTINATION=/mnt/gentoo
DEVICE=/tmp/none
DEVICE_BLOCK_SIZE=$((1024*1024))
DEVICE_PARTITION_TYPE=gpt
EMAIL=""
KERNEL="/boot/kernel"
NICE=0
PASSWORD="password"
PHASES="stage3download,stage3signature,stage3hash,extract,dynamictranslation,deletestage3,resolvconf,mountchroot,portage,timezone,locale,update,password"
PORTAGE="latest"
STAGE3="latest"
THREADS=$(grep -c processor /proc/cpuinfo)
TIMEZONE="UTC"
TMP="/tmp"
VERBOSITY=0

#------------------------------------------------------------------------------
# command line arguments

if [ $# -eq 0 ]; then
	gentooinstall_help
	exit 1
fi

THIS="$0"
while [ $# -ne 0 ]; do
	case "$1" in
		"-a"|"--architecture")
			ARCHITECTURE="$2"
			shift 2
			;;
		"-b"|"--block-device")
			DEVICE="$2"
			shift 2
			;;
		"--block-device-block-size")
			DEVICE_BLOCK_SIZE="$2"
			shift 2
			;;
		"--block-device-partition-type")
			DEVICE_PARTITION_TYPE="$2"
			shift 2
			;;
		"--chroot")
			CHROOT=true
			shift
			;;
		"-d"|"--destination")
			DESTINATION="$2"
			shift 2
			;;
		"-h"|"--help")
			gentooinstall_help
			exit
			;;
		"--password")
			PASSWORD="$2"
			shift 2
			;;
		"-p"|"--phase")
			PHASES="$2"
			shift 2
			;;
		"--portage")
			PORTAGE="$2"
			shift 2
			;;
		"--stage3")
			STAGE3="$2"
			shift 2
			;;
		"-t"|"--timezone")
			TIMEZONE="$2"
			shift 2
			;;
		*)
			echo "error: unrecognized argument \"$1\""
			exit 1
			break;;
	esac
done

if [ "$(gentooinstall_architecture)" = "x86_64" -a "$ARCHITECTURE" = "i486" ]; then
	CHROOTARCH="linux32"
fi
if [ "$(gentooinstall_architecture)" = "x86_64" -a "$ARCHITECTURE" = "i686" ]; then
	CHROOTARCH="linux32"
fi

#------------------------------------------------------------------------------
# begin execution

gentooinstall_main
